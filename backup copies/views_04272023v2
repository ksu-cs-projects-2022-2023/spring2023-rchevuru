# importinf inportant packages 
from app import app
from flask import render_template,request, flash
import pandas as pd
import json
import plotly
import plotly.express as px
import numpy as np
import plotly.graph_objects as go

Countrycsv = pd.read_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/SmallCombinedCounties1.csv")
products = pd.read_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/CombinedProducts1.csv")
all_countires = pd.read_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/All Counties/Countries.csv")
   
#Countrycsv.rename(columns ={'NomenCode': 'NomenclatureCode'})

@app.route('/')
def index():
         return render_template("public/index.html")
@app.route('/about', methods=["GET", "POST"])
def Project():
   
    nodup_countries = sorted(Countrycsv["ReporterName"].drop_duplicates())
    nodup_products =  sorted(products['ProductDescription'].drop_duplicates())
    nodup_partners=  sorted(Countrycsv['Partner'].drop_duplicates())
    nodup_clatureCode = sorted(Countrycsv['NomenclatureCode'].drop_duplicates())

    products['ProductCode']=products['ProductCode'].astype(str)
    products['NomenclatureCode']=products['NomenclatureCode'].astype(str)

    Countrycsv['ProductCode']=Countrycsv['ProductCode'].astype(str)
    Countrycsv['NomenclatureCode']=Countrycsv['NomenclatureCode'].astype(str)

    PDmerged = Countrycsv.merge(products, how = 'outer', left_on=['NomenclatureCode', 'ProductCode'], right_on=['NomenclatureCode', 'ProductCode']).dropna(how='all', axis='columns')
    #PDmerged.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
    #PDmerged.drop(["a"], axis=1, inplace=True)
    #Country_names = all_countires['name']
    #PDmerged['country names'] = Country_names

    if(request.method == 'POST'):
        req = request.form
        User_partners = req.getlist('Partners')
        User_countries = req.getlist('Countries')
        User_products = req.getlist('Products')
        User_clatureCode = req.getlist('ClatureCode')
        print('user code')
        print(User_clatureCode)
        
        

        PDfilter = PDmerged
      
        try:
            print(User_countries)
            if(len(User_countries) > 0):
                PDfilter = PDfilter.query("ReporterName in @User_countries & ReporterName.notnull()").dropna(how='all', axis='columns')
                print(PDfilter.head(100))

            print(User_partners)
            if(len(User_partners) > 0):
            #if User_partners contains WLD get all partners except WLD 
            
                if('WLD' not in User_partners):
                    PDfilter = PDfilter.query("Partner in @User_partners & Partner.notnull()").dropna(how='all', axis='columns')

                if('WLD'  in User_partners):
                    PDfilter = PDfilter.set_index("Partner")
                    PDfilter = PDfilter.drop('WLD')

           
            print(PDfilter.head(100))
        
       # PDfilter.to_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/testing/PD.csv")

        
       

            print(User_products)
        
            if(len(User_products) > 0):
                PDfilter = PDfilter.query("ProductDescription in @User_products & ProductDescription.notnull()").dropna(how='all', axis='columns')
                print(PDfilter.head(100))
        

            print(User_clatureCode)
            if(len(User_clatureCode) > 0):
                 PDfilter = PDfilter.query("NomenclatureCode in @User_clatureCode & NomenclatureCode.notnull()").dropna(how='all', axis='columns')
                 print(PDfilter.head(100))
             # maybe perform an additional check here


        #partner_count = PDfilter.groupby('Partner').count().reset_index()
            product_count = PDfilter.groupby(['Partner','3 Wrd Abb','ReporterName','NomenclatureCode'])['ProductDescription'].count().reset_index(name = 'ProductCount')
            product_count = product_count.fillna(0)
        #if and message 

        #product_count = PDfilter.groupby(['Partner','ProductDescription','ReporterName','NomenclatureCode']).transform('count')
        #PDfilter['product_count'] = product_count

        except:
            flash("Try again, wrong combo", "warning")
        PDfilter.to_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/testing/PD.csv")
        product_count.to_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/testing/add.csv")
        
        # Initialize DF 
        df = product_count


        print(all_countires)
        # Append the Partner's coordinates to the Country dataframe
        df = pd.merge(df, all_countires[['3 Wrd Abb','Lat','Lng']],
              how='inner', left_on='Partner', right_on='3 Wrd Abb', suffixes=('_Partner','_Country'))

        # Append the  Country Names's coordinates to the Country' dataframe
        df = pd.merge(df, all_countires[['3 Wrd Abb','Lat','Lng']],
              how='inner', left_on='3 Wrd Abb', right_on='3 Wrd Abb', suffixes=('_Partner','_Country'))

        # Keep only Origin/Destination Country and Partner columns, and their Latitude/Longitude
        df = df.drop(columns=['Partner Code','Country Name' ,'Country Code'])

        #fig 
        fig = go.Figure()
        for i in range(len(df)):
            tracename = str(i+1) + str (' ') +str(df['3 Wrd Abb_Partner'][i]) + ' - ' + str(df['3 Wrd Abb_Country'][i])
            #print(tracename)
            fig.add_trace(go.Scattergeo(locationmode = 'ISO-3',
                          lon = [ df['Lng_Partner'][i], df['Lng_Country'][i] ],
                          lat = [ df['Lat_Partner'][i], df['Lat_Country'][i] ],
                          legendgroup =tracename,
                          name=tracename,
                          text =tracename + ' Product Count : ' +str(df['ProductCount'][i]) ,
                          #hoverinfo = str(df['ProductCount'][i]) ,
                          mode = 'lines',
                          line = dict(width = 1) )#,color = 'red')   
            )       
        # Define Plots Layout
        fig.update_layout(title_text = 'TEST TEST <br>(Rana Test)',
                          showlegend = True,
                          geo = dict(scope = 'world',
                          projection=dict( type='azimuthal equal area' ),
                          showland = True,
                          #landcolor = 'rgb(243, 243, 243)',
                          #countrycolor = 'rgb(204, 204, 204)',
                                    ),
                          )
        grahJSON = json.dumps(fig, cls= plotly.utils.PlotlyJSONEncoder)

        return render_template("public/project.html", grahJSON = grahJSON,nodup_countries = nodup_countries, 
                           nodup_partners = nodup_partners,nodup_products = nodup_products,
                           nodup_clatureCode = nodup_clatureCode)

    return render_template("public/project.html",nodup_countries = nodup_countries, 
                           nodup_partners = nodup_partners,nodup_products = nodup_products,
                           nodup_clatureCode = nodup_clatureCode)

@app.route('/included')
def includedCountries():

    #df = pd.read_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/All Counties.csv")
    #pd.set_option('display.max_colwidth', 100)
    return render_template('public/info.html', tables = [all_countires.to_html(col_space=100,justify='left', float_format='{:10.2f}'.format)],titles = [''])

@app.route('/country_info')
def countryInfo():
    nodup_countries = sorted(Countrycsv["ReporterName"].drop_duplicates())

    products['ProductCode']=products['ProductCode'].astype(str)
    products['NomenclatureCode']=products['NomenclatureCode'].astype(str)

    Countrycsv['ProductCode']=Countrycsv['ProductCode'].astype(str)
    Countrycsv['NomenclatureCode']=Countrycsv['NomenclatureCode'].astype(str)

    PDmerged = Countrycsv.merge(products, how = 'outer', left_on=['NomenclatureCode', 'ProductCode'], right_on=['NomenclatureCode', 'ProductCode']).dropna(how='all', axis='columns')

    if(request.method == 'POST'):
        req = request.form
        User_countries = req.getlist('country_info')


    return render_template("public/country_info.html",nodup_countries = nodup_countries
                          )
@app.route('/test')
def testDisplay():
    bigscsv = pd.read_csv("C:/Users/nonAdmin/Documents/Classes/Cs/598(new)/seperate python scripts_Coloab doesn't like_/combine/results/CombinedCounties2.csv")

    products['ProductCode']=products['ProductCode'].astype(str)
    products['NomenclatureCode']=products['NomenclatureCode'].astype(str)

    Countrycsv['ProductCode']=bigscsv['ProductCode'].astype(str)
    Countrycsv['NomenclatureCode']=bigscsv['NomenclatureCode'].astype(str)

    PDmerged = Countrycsv.merge(products, how = 'outer', left_on=['NomenclatureCode', 'ProductCode'], right_on=['NomenclatureCode', 'ProductCode']).dropna(how='all', axis='columns')

    return render_template('public/info.html', tables = [PDmerged.to_html(col_space=100,justify='left', float_format='{:10.2f}'.format)],titles = [''])
                           